# Generated by Django 4.2.3 on 2023-09-06 08:09

import ckeditor.fields
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Commercial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=100, verbose_name='Кричащий заголовок')),
                ('sub_title', models.CharField(blank=True, max_length=255, verbose_name='Подзаголовок, если нужен')),
                ('about', models.CharField(blank=True, max_length=100, verbose_name='Слоган для ссылки на кнопке')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='URL')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='images/%Y/%m/%d', verbose_name='рекламная иконка ')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/%Y/%m/%d', verbose_name='изображение к рекламной статье, если есть')),
                ('content', ckeditor.fields.RichTextField(blank=True, verbose_name='текст рекламы')),
                ('is_published', models.BooleanField(default=False, verbose_name='Публикация')),
            ],
            options={
                'verbose_name': 'Акции и реклама',
                'verbose_name_plural': 'Акции',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Contacts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=100, verbose_name='заголовок')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='URL')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images', verbose_name='Изображение')),
                ('annotations1', ckeditor.fields.RichTextField(blank=True, verbose_name='информация')),
                ('annotations2', models.TextField(blank=True, verbose_name='ссылка,если есть')),
                ('is_header_published', models.BooleanField(default=False, verbose_name='Публикация в шапке сайта')),
                ('is_published', models.BooleanField(default=False, verbose_name='Публикация в контактах, карты-не отмечать!!!')),
            ],
            options={
                'verbose_name': 'контакты ',
                'verbose_name_plural': 'Контакты',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Graphics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, upload_to='images/%Y/%m/%d', verbose_name='изображение')),
                ('title', models.CharField(max_length=55, verbose_name='описание изображения')),
                ('note', ckeditor.fields.RichTextField(blank=True, verbose_name='примечание')),
                ('is_published', models.BooleanField(default=True, verbose_name='Публикация')),
            ],
            options={
                'verbose_name': 'графический объект',
                'verbose_name_plural': 'Графика и т.п.',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=55, verbose_name='Заголовок статьи')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='URL')),
                ('content', ckeditor.fields.RichTextField(blank=True, verbose_name='текст статьи')),
                ('is_published', models.BooleanField(default=True, verbose_name='Публикация')),
            ],
            options={
                'verbose_name': 'Статью',
                'verbose_name_plural': 'Статьи',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=255, verbose_name='Категория услуг')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='URL')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/%Y/%m/%d', verbose_name='основное изображение для категории')),
                ('content', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Краткое  описание')),
                ('is_published', models.BooleanField(default=True, verbose_name='Публикация')),
            ],
            options={
                'verbose_name': 'Категория услуг',
                'verbose_name_plural': 'Категории услуг',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='URL')),
                ('duration', models.CharField(blank=True, default=' - ', max_length=255, verbose_name='продолжительность')),
                ('price', models.PositiveIntegerField(default=0, null=True, verbose_name='Цена')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/%Y/%m/%d', verbose_name='основное изображение для услуги')),
                ('video', models.FileField(blank=True, null=True, upload_to='images/%Y/%m/%d', verbose_name='видео (если есть)')),
                ('content', ckeditor.fields.RichTextField(blank=True, verbose_name='Описание')),
                ('time_create', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('time_update', models.DateTimeField(auto_now=True, verbose_name='Время изменения')),
                ('is_published', models.BooleanField(default=True, verbose_name='Публикация')),
                ('cat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='serv_category', to='therapy.servicecategory', verbose_name='Категория услуг')),
            ],
            options={
                'verbose_name': 'Услугу',
                'verbose_name_plural': 'Услуги',
                'ordering': ['time_create', 'title'],
            },
        ),
        migrations.CreateModel(
            name='ServicesGallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/%Y/%m/%d', verbose_name='Фото')),
                ('note', models.CharField(blank=True, max_length=100, verbose_name='примечание')),
                ('is_published', models.BooleanField(default=True, verbose_name='Публикация')),
                ('gallery_service_link', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='therapy.services', verbose_name=' к какой услуге фото')),
            ],
            options={
                'verbose_name': 'фотографию к услуге',
                'verbose_name_plural': 'фото к услуге',
                'ordering': ['gallery_service_link'],
            },
        ),
        migrations.CreateModel(
            name='PostGallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/%Y/%m/%d', verbose_name='Фото')),
                ('note', models.CharField(blank=True, max_length=100, verbose_name='примечание')),
                ('is_published', models.BooleanField(default=True, verbose_name='Публикация')),
                ('gallery_post_link', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='therapy.post', verbose_name=' к какой статье фото')),
            ],
            options={
                'verbose_name': 'фотографию к статье',
                'verbose_name_plural': 'фото к статье',
                'ordering': ['gallery_post_link'],
            },
        ),
        migrations.AddField(
            model_name='post',
            name='post_cat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_post', to='therapy.services', verbose_name='О какой услуге статья'),
        ),
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/%Y/%m/%d', verbose_name='Фото')),
                ('video', models.FileField(blank=True, null=True, upload_to='images/%Y/%m/%d', verbose_name='видео (если есть)')),
                ('note', models.CharField(blank=True, max_length=100, verbose_name='примечание')),
                ('is_published', models.BooleanField(default=True, verbose_name='Публикация')),
                ('gallery_link', models.ForeignKey(default=6, on_delete=django.db.models.deletion.CASCADE, related_name='cat_photo', to='therapy.servicecategory', verbose_name='к какой категории фото')),
            ],
            options={
                'verbose_name': 'фото',
                'verbose_name_plural': 'фото',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Coaches',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Имя')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/%Y/%m/%d', verbose_name='портрет')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='URL')),
                ('content', ckeditor.fields.RichTextField(blank=True, verbose_name='Кто по жизни')),
                ('is_published', models.BooleanField(default=True, verbose_name='Работает или нет')),
                ('coach_services', models.ManyToManyField(to='therapy.servicecategory', verbose_name='Чему тренирует')),
            ],
            options={
                'verbose_name': 'Тренер',
                'verbose_name_plural': 'Тренера',
                'ordering': ['id', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Abonements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=100, verbose_name='Заголовок')),
                ('sub_title', models.CharField(db_index=True, max_length=255, verbose_name='подзаголовок')),
                ('abonement_duration', models.CharField(blank=True, default=' - ', max_length=255, verbose_name='кол-во занятий или сеансов')),
                ('abonement_price', models.PositiveIntegerField(default=0, null=True, verbose_name='Цена абонемента')),
                ('validity', models.CharField(max_length=100, verbose_name='срок действия')),
                ('is_published', models.BooleanField(default=False, verbose_name='Публикация')),
                ('service_link', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='therapy.services', verbose_name='к какой  услуге относится')),
            ],
            options={
                'verbose_name': 'Абонемет',
                'verbose_name_plural': 'Абонементы',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=30, verbose_name='телефон для связи')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
